{"name": "test_native_windows_ansi", "status": "failed", "statusDetails": {"message": "AssertionError: expected call not found.\nExpected: mock(1234, 4)\n  Actual: not called.", "trace": "self = <pip._vendor.colorama.tests.ansitowin32_test.AnsiToWin32Test testMethod=test_native_windows_ansi>\n\n    def test_native_windows_ansi(self):\n        with ExitStack() as stack:\n            def p(a, b):\n                stack.enter_context(patch(a, b, create=True))\n            # Pretend to be on Windows\n            p(\"colorama.ansitowin32.os.name\", \"nt\")\n            p(\"colorama.ansitowin32.winapi_test\", lambda: True)\n            p(\"colorama.win32.winapi_test\", lambda: True)\n            p(\"colorama.winterm.win32.windll\", \"non-None\")\n            p(\"colorama.winterm.get_osfhandle\", lambda _: 1234)\n    \n            # Pretend that our mock stream has native ANSI support\n            p(\n                \"colorama.winterm.win32.GetConsoleMode\",\n                lambda _: ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n            )\n            SetConsoleMode = Mock()\n            p(\"colorama.winterm.win32.SetConsoleMode\", SetConsoleMode)\n    \n            stdout = Mock()\n            stdout.closed = False\n            stdout.isatty.return_value = True\n            stdout.fileno.return_value = 1\n    \n            # Our fake console says it has native vt support, so AnsiToWin32 should\n            # enable that support and do nothing else.\n            stream = AnsiToWin32(stdout)\n>           SetConsoleMode.assert_called_with(1234, ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n\nLib\\site-packages\\pip\\_vendor\\colorama\\tests\\ansitowin32_test.py:275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Mock id='2688714174832'>, args = (1234, 4), kwargs = {}\nexpected = 'mock(1234, 4)', actual = 'not called.'\nerror_message = 'expected call not found.\\nExpected: mock(1234, 4)\\n  Actual: not called.'\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n>           raise AssertionError(error_message)\nE           AssertionError: expected call not found.\nE           Expected: mock(1234, 4)\nE             Actual: not called.\n\nC:\\Program Files\\Python312\\Lib\\unittest\\mock.py:935: AssertionError"}, "start": 1712902530736, "stop": 1712902530736, "uuid": "3c817ab2-1385-41ec-a846-9661fa4dc5fb", "historyId": "d663a26b1602fc4e3306e1a23d47a205", "testCaseId": "d663a26b1602fc4e3306e1a23d47a205", "fullName": "Lib.site-packages.pip._vendor.colorama.tests.ansitowin32_test.AnsiToWin32Test#test_native_windows_ansi", "labels": [{"name": "parentSuite", "value": "Lib.site-packages.pip._vendor.colorama.tests"}, {"name": "suite", "value": "ansitowin32_test"}, {"name": "subSuite", "value": "AnsiToWin32Test"}, {"name": "host", "value": "DESKTOP-MS40328"}, {"name": "thread", "value": "2256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Lib.site-packages.pip._vendor.colorama.tests.ansitowin32_test"}]}